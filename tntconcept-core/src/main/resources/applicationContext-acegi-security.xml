<?xml version="1.0" encoding="UTF-8"?>
<!--

    TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
    Copyright (C) 2007 Autentia Real Bussiness Solution S.L.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

    <!-- Define URLs to be mapped to filters -->
    <bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
        <property name="filterInvocationDefinitionSource">
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /**=httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
            </value>
        </property>
    </bean>

    <!-- Filter to logout users -->
    <bean id="logoutFilter" class="org.acegisecurity.ui.logout.LogoutFilter">
        <!-- URL redirected to after logout -->
        <constructor-arg value="/entryPoint.jsf"/>
        <!-- List of beans to call when user is logged out -->
        <constructor-arg>
            <list>
                <ref bean="rememberMeServices"/>
                <bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- Filter to intercept login POSTs coming from an HTML form (the way JEE does) -->
    <bean id="authenticationProcessingFilter" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
        <!-- URL to redirect to when authentication fails -->
        <property name="authenticationFailureUrl" value="/notAuthorized.jsf"/>
        <!-- URL to redirect to if authentication succeds and no target URL is specified -->
        <property name="defaultTargetUrl" value="/entryPoint.jsp"/>
        <!-- Rest of configuration -->
        <property name="filterProcessesUrl" value="/j_acegi_security_check"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="rememberMeServices" ref="rememberMeServices"/>
    </bean>

    <!-- Filter to create an anonymous Authentication object if none exists -->
    <bean id="anonymousProcessingFilter" class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
        <!-- Anonymous user and roles -->
        <property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
        <!-- Key for authentication token -->
        <property name="key" value="changeThis"/>
    </bean>

    <!-- Filter to catch security exceptions and redirect user to specific pages -->
    <bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
        <!-- Login entry point -->
        <property name="authenticationEntryPoint">
            <bean class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
                <!-- URL of login page -->
                <property name="loginFormUrl" value="/entryPoint.jsf"/>
                <!-- Whether or not to force HTTPS for the login -->
                <property name="forceHttps" value="false"/>
            </bean>
        </property>
        <!-- Handler for denied requests -->
        <property name="accessDeniedHandler">
            <bean class="org.acegisecurity.ui.AccessDeniedHandlerImpl">
                <property name="errorPage" value="/notAuthorized.jsf"/>
            </bean>
        </property>
    </bean>

    <!-- Filter to load/persist SecurityContext information from/to session -->
    <bean id="httpSessionContextIntegrationFilter"
          class="org.acegisecurity.context.HttpSessionContextIntegrationFilter"/>

    <!-- Filter to wrap standard HttpServletRequest with an ACEGI-aware request which overwrites
         isUserInRole() and getRemoteUser() methods -->
    <bean id="securityContextHolderAwareRequestFilter"
          class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter"/>

    <!-- Filter to store authentication details in a persistent cookie so that the user can come back without login -->
    <bean id="rememberMeProcessingFilter" class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="rememberMeServices" ref="rememberMeServices"/>
    </bean>

    <!-- Service for remember-me feature -->
    <bean id="rememberMeServices" class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
        <property name="userDetailsService" ref="userDetailsService"/>
        <property name="key" value="changeThis"/>
    </bean>

    <!-- Service for authenticating users -->
    <bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
        <!-- List of authentication providers -->
        <property name="providers">
            <list>
                <!-- LDAP authentication provider -->
                <ref local="ldapAuthenticationProvider"/>
                <!-- Anonymous authentication provider -->
                <bean class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
                    <property name="key" value="changeThis"/>
                </bean>
                <!-- Remember-me authentication provider -->
                <bean class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
                    <property name="key" value="changeThis"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- LDAP authentication provider -->
    <bean id="ldapAuthenticationProvider" class="org.acegisecurity.providers.ldap.LdapAuthenticationProvider">
        <constructor-arg ref="ldapBindAuthenticator"/>
        <constructor-arg ref="ldapAuthoritiesPopulator"/>
    </bean>

    <bean id="ldapBindAuthenticator" class="org.acegisecurity.providers.ldap.authenticator.BindAuthenticator">
        <constructor-arg ref="defaultInitialDirContextFactory"/>
    </bean>

    <bean id="defaultInitialDirContextFactory" class="org.acegisecurity.ldap.DefaultInitialDirContextFactory">
        <constructor-arg value="ldap://192.168.168.3:389/dc=autentia,dc=com"/>
    </bean>

    <bean id="ldapAuthoritiesPopulator" class="org.acegisecurity.providers.ldap.populator.DefaultLdapAuthoritiesPopulator">
        <constructor-arg ref="defaultInitialDirContextFactory"/>
        <constructor-arg value=""/>
    </bean>

    <!-- ACL BasePermissions defined by ACEGI -->
    <bean id="org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acls.domain.BasePermission.ADMINISTRATION</value>
        </property>
    </bean>
    <bean id="org.acegisecurity.acls.domain.BasePermission.CREATE"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acls.domain.BasePermission.CREATE</value>
        </property>
    </bean>
    <bean id="org.acegisecurity.acls.domain.BasePermission.WRITE"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acls.domain.BasePermission.WRITE</value>
        </property>
    </bean>
    <bean id="org.acegisecurity.acls.domain.BasePermission.READ"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acls.domain.BasePermission.READ</value>
        </property>
    </bean>
    <bean id="org.acegisecurity.acls.domain.BasePermission.DELETE"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acls.domain.BasePermission.DELETE</value>
        </property>
    </bean>

    <!-- This bean is optional; it isn't used by any other bean as it only listens and logs -->
    <bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener"/>

</beans>
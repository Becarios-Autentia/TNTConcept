package com.autentia.tnt.manager.contacts;

import com.autentia.tnt.businessobject.OrganizationDocCategory;
import com.autentia.tnt.dao.SortCriteria;
import com.autentia.tnt.dao.hibernate.OrganizationDocCategoryDAO;
import com.autentia.tnt.util.SpringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;

public class OrganizationDocCategoryManager {
    /* OrganizationDocCategory - generated by stajanov (do not edit/delete) */

    /** Logger */
    private static final Log log = LogFactory.getLog(OrganizationDocCategoryManager.class);

    /** OrganizationDocCategory DAO **/
    private OrganizationDocCategoryDAO organizationDocCategoryDAO;

    /**
     * Get default OrganizationDocCategoryManager as defined in Spring's configuration file.
     * @return the default singleton OrganizationDocCategoryManager
     */
    public static OrganizationDocCategoryManager getDefault() {
        return (OrganizationDocCategoryManager) SpringUtils.getSpringBean("managerOrganizationDocCategory");
    }

    /**
     * Empty constructor needed by CGLIB (Spring AOP)
     */
    protected OrganizationDocCategoryManager() { }

    /**
     * Default constructor 
     * @deprecated do not construct managers alone: use Spring's declared beans
     */
    public OrganizationDocCategoryManager( OrganizationDocCategoryDAO organizationDocCategoryDAO ) {
        this.organizationDocCategoryDAO = organizationDocCategoryDAO;
    }

    /**
     * List organizationDocCategorys. 
     * @param sort sorting criteria
     * @return the list of all organizationDocCategorys sorted by requested criterion
     */
    public List<OrganizationDocCategory> getAllEntities(SortCriteria sort){
        return organizationDocCategoryDAO.search( sort );
    }

    /**
     * Get organizationDocCategory by primary key.
     * @return organizationDocCategory selected by id.
     */
    public OrganizationDocCategory getEntityById(int id){
        return organizationDocCategoryDAO.loadById(id);
    }

    /**
     * Insert organizationDocCategory. 
     */
    public void insertEntity(OrganizationDocCategory organizationDocCategory) {
        organizationDocCategoryDAO.insert(organizationDocCategory);
    }

    /**
     * Update organizationDocCategory. 
     */
    public void updateEntity(OrganizationDocCategory organizationDocCategory) {
        organizationDocCategoryDAO.update(organizationDocCategory);
    }

    /**
     * Delete organizationDocCategory. 
     */
    public void deleteEntity(OrganizationDocCategory organizationDocCategory) {
        organizationDocCategoryDAO.delete(organizationDocCategory);
    }
}


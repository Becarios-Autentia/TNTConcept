/**
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
 * Copyright (C) 2007 Autentia Real Bussiness Solution S.L.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.autentia.tnt.manager.holiday;

import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.commons.lang.time.DateUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.autentia.tnt.businessobject.Holiday;
import com.autentia.tnt.businessobject.HolidayState;
import com.autentia.tnt.businessobject.RequestHoliday;
import com.autentia.tnt.businessobject.User;
import com.autentia.tnt.businessobject.UserHolidaysState;
import com.autentia.tnt.businessobject.WorkingAgreement;
import com.autentia.tnt.dao.hibernate.UserDAO;
import com.autentia.tnt.dao.hibernate.WorkingAgreementDAO;
import com.autentia.tnt.dao.search.HolidaySearch;
import com.autentia.tnt.dao.search.RequestHolidaySearch;
import com.autentia.tnt.manager.holiday.HolidayManager;
import com.autentia.tnt.util.SpringUtils;

/* Activity - generated by stajanov (do not edit/delete) */

public class UserHolidaysStateManager {

	/** Logger */
	private static final Log log = LogFactory.getLog(UserHolidaysStateManager.class);

	public static UserHolidaysStateManager getDefault() {
		return (UserHolidaysStateManager) SpringUtils.getSpringBean("managerUserHolidaysState");
	}

	/**
	 * Empty constructor needed by CGLIB (Spring AOP)
	 */
	protected UserHolidaysStateManager() {
	}

	/**
	 * @return Indica si un día es festivo
	 */
	private boolean isHoliday(List<Holiday> fiestas, Date date) {
		// ¿ Es fin de semana ?
		Calendar cActual = Calendar.getInstance();
		cActual.setTime(date);
		if ((cActual.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)
				|| (cActual.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY)) {
			return true;
		}

		Iterator<Holiday> ite = fiestas.iterator();
		Holiday current;

		while (ite.hasNext()) {
			current = ite.next();
			if (DateUtils.isSameDay(current.getDate(), date)) {
				return true;
			}
		}

		return false;
	}

	/**
	 * @return Devuelve el número de días laborables que hay entre dos fechas
	 */
	public int getWorkingDays(User user, Date fromDate, Date toDate) {
		int total = 0;

		// Evitamos un bucle infinito en el bucle que viene a continuación
		if (fromDate.before(toDate) || DateUtils.isSameDay(fromDate, toDate)) {
			HolidaySearch fiestaSearch = new HolidaySearch();
			Date current = (Date) fromDate.clone();

			fiestaSearch.setStartDate(fromDate);
			fiestaSearch.setEndDate(toDate);

			CorrespondingHolidayManager correspondingFiestasManager = CorrespondingHolidayManager.getDefault();

			List<Holiday> allFiestas = HolidayManager.getDefault().getAllEntities(fiestaSearch, null);

			Calendar fromYear = Calendar.getInstance();
			Calendar toYear = Calendar.getInstance();
			fromYear.setTime(fromDate);
			toYear.setTime(toDate);

			List<Holiday> correspondingFiestas = correspondingFiestasManager.calculateCorrespondingHolidays(fromYear, toYear,
					allFiestas, user.getStartDate());

			while (current.before(toDate) || DateUtils.isSameDay(current, toDate)) {
				if (!this.isHoliday(correspondingFiestas, current)) {
					total++;
				}
				current = DateUtils.addDays(current, 1);
			}
		}

		return total;
	}

	public UserHolidaysState calculateUserHolidaysState(User usuario, Date year) {
		UserHolidaysState uhs = new UserHolidaysState();
		uhs.setUser(usuario);
		// WorkingAgreement attribute is an HB proxy not initialized, we need to get it
		// from DB
		WorkingAgreementDAO workingAgreementDao = WorkingAgreementDAO.getDefault();
		WorkingAgreement agreement = workingAgreementDao.getById(usuario.getAgreement().getId());
		// and refresh the user instance agreement attribute
		usuario.setAgreement(agreement);

		uhs.setTotalYear(agreement.getHolidays());

		int acceptedHolidays = 0;

		if (year != null) {

			HolidayManager fiestasManager = HolidayManager.getDefault();

			// We must take in account previous year holidays and next year holidays

			Date firstDayOfYear = com.autentia.tnt.util.DateUtils.getFirstDayOfYear(year);
			Date lastDayOfYear = com.autentia.tnt.util.DateUtils.getLastDayOfYear(year);
			
			Calendar calendarFirstDayOfYear = Calendar.getInstance();
			calendarFirstDayOfYear.setTime(firstDayOfYear);
			calendarFirstDayOfYear.add(Calendar.YEAR, -1);
			
			Calendar calendarLastDayOfYear = Calendar.getInstance();
			calendarLastDayOfYear.setTime(lastDayOfYear);
			calendarLastDayOfYear.add(Calendar.YEAR, 1);
			
			HolidaySearch fiestaSearch = new HolidaySearch();
			fiestaSearch.setStartDate(calendarFirstDayOfYear.getTime());
			fiestaSearch.setEndDate(calendarLastDayOfYear.getTime());

			CorrespondingHolidayManager correspondingFiestasManager = CorrespondingHolidayManager.getDefault();

			List<Holiday> allFiestas = fiestasManager.getAllEntities(fiestaSearch, null);

			firstDayOfYear = com.autentia.tnt.util.DateUtils.getFirstDayOfYear(year);
			calendarFirstDayOfYear.setTime(firstDayOfYear);
	
			lastDayOfYear = com.autentia.tnt.util.DateUtils.getLastDayOfYear(year);
			calendarLastDayOfYear.setTime(lastDayOfYear);

			List<Holiday> correspondingFiestasToUser = correspondingFiestasManager.calculateCorrespondingHolidays(calendarFirstDayOfYear,
					calendarLastDayOfYear, allFiestas, usuario.getStartDate());

			RequestHolidayManager holyManager = RequestHolidayManager.getDefault();
			RequestHolidaySearch holSearch = new RequestHolidaySearch();
			holSearch.setUserRequest(uhs.getUser());
			holSearch.setState(HolidayState.ACCEPT);
			holSearch.setStartChargeYear(calendarFirstDayOfYear.getTime());
			holSearch.setEndChargeYear(calendarLastDayOfYear.getTime());

			List<RequestHoliday> listH = holyManager.getAllEntities(holSearch, null);

			for (RequestHoliday rH : listH) {
				Calendar cActual = Calendar.getInstance();
				cActual.setTime(rH.getBeginDate());
				while (!cActual.getTime().after(rH.getFinalDate())) {
					if (cActual.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY
							&& cActual.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
						boolean isFiesta = false;

						for (Holiday fiest : correspondingFiestasToUser) {
							Calendar cFiesta = Calendar.getInstance();
							cFiesta.setTime(fiest.getDate());
							if (cFiesta.get(Calendar.YEAR) == cActual.get(Calendar.YEAR)
									&& cFiesta.get(Calendar.MONTH) == cActual.get(Calendar.MONTH)
									&& cFiesta.get(Calendar.DAY_OF_MONTH) == cActual.get(Calendar.DAY_OF_MONTH)) {
								isFiesta = true;
							}
						}

						if (!isFiesta) {
							acceptedHolidays++;
						}
					}

					cActual.add(Calendar.DAY_OF_MONTH, 1);
				}

			}
			uhs.setTotalAccepted(acceptedHolidays);

			Calendar calAuxCont = Calendar.getInstance();
			calAuxCont.setTime(uhs.getUser().getStartDate());

			Calendar calAux = Calendar.getInstance();
			calAux.setTime(year);
			int yearCharge = calAux.get(Calendar.YEAR);
			int yearContract = calAuxCont.get(Calendar.YEAR);

			if (yearCharge == yearContract) {
				// Dividimos los días de cada usuario entre los dias del año.
				double ratio = uhs.getUser().getAgreement().getHolidays() / 360.0;
				int dayContract = calAuxCont.get(Calendar.DAY_OF_YEAR);
				int workedDays = (360 - dayContract);
				double holidayDays = workedDays * ratio;
				double aux = Math.round(holidayDays);
				uhs.setTotalYear((int) aux);
			}
		}

		return uhs;
	}

	/**
	 * @return Devuelve el número de dias de vacaciones que le quedan a un usuario
	 *         en un año
	 */
	public int getFreeDays(User user, Date year) {
		UserHolidaysState state = this.calculateUserHolidaysState(user, year);
		return state.getTotalYear() - state.getTotalAccepted();
	}
}
package com.autentia.tnt.dao.hibernate;

import com.autentia.tnt.businessobject.OrganizationDocCategory;
import com.autentia.tnt.dao.DataAccException;
import com.autentia.tnt.dao.SearchCriteria;
import com.autentia.tnt.dao.SortCriteria;
import com.autentia.tnt.util.SpringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;

/**
 * DAO for OrganizationDocCategory objects.
 * @author stajanov code generator
 */
public class OrganizationDocCategoryDAO extends HibernateManagerBase<OrganizationDocCategory> {
    /* organizationDocCategory - generated by stajanov (do not edit/delete) */

    /** Logger */
    private static final Log log = LogFactory.getLog(OrganizationDocCategoryDAO.class);

    /**
     * Get default OrganizationDocCategoryDAO as defined in Spring's configuration file.
     * @return the default singleton OrganizationDocCategoryDAO
     */
    public static OrganizationDocCategoryDAO getDefault()
    {
        return (OrganizationDocCategoryDAO) SpringUtils.getSpringBean("daoOrganizationDocCategory");
    }

    /**
     * Constructor
     * @deprecated do not construct DAOs alone: use Spring's declared beans
     */
    public OrganizationDocCategoryDAO(){
        super(false);
    }

    /**
     * Retrieve a OrganizationDocCategory object from database given its id
     * @param id primary key of OrganizationDocCategory object
     * @return the OrganizationDocCategory object identified by the id
     * @throws DataAccException on error
     */
    public OrganizationDocCategory loadById( int id ) throws DataAccException {
        return super.loadByPk(OrganizationDocCategory.class,id);
    }

    public OrganizationDocCategory getById(int id ) throws DataAccException {
        return super.getByPk(OrganizationDocCategory.class,id);
    }

    /**
     * Get all OrganizationDocCategory objects from database sorted by the given criteria
     * @param crit the sorting criteria
     * @return a list with all existing OrganizationDocCategory objects
     * @throws DataAccException on error
     */
    public List<OrganizationDocCategory> search(SortCriteria crit ) throws DataAccException {
        return super.list(OrganizationDocCategory.class,crit);
    }

    /**
     * Get specified OrganizationDocCategory objects from database sorted by the given criteria
     * @param search search criteria
     * @param sort the sorting criteria
     * @return a list with OrganizationDocCategory objects matching the search criteria
     * @throws DataAccException on error
     */
    public List<OrganizationDocCategory> search(SearchCriteria search, SortCriteria sort) throws DataAccException {
        return super.search(OrganizationDocCategory.class,search,sort);
    }

    /**
     * Insert a new OrganizationDocCategory object in database
     * @param dao the OrganizationDocCategory object to insert
     * @throws DataAccException on error
     */
    public void insert(OrganizationDocCategory dao) throws DataAccException {
        super.insert(dao);
    }

    /**
     * Update an existing OrganizationDocCategory object in database
     * @param dao the OrganizationDocCategory object to update
     * @throws DataAccException on error
     */
    public void update(OrganizationDocCategory dao) throws DataAccException {
        super.update(dao,dao.getId());
    }

    /**
     * Delete an existing OrganizationDocCategory object in database
     * @param dao the OrganizationDocCategory object to update
     * @throws DataAccException on error
     */
    public void delete(OrganizationDocCategory dao) throws DataAccException {
        super.delete(dao,dao.getId());
        super.flush();
    }
}

